name: CD

on:
  push:
    branches: ['release-6.6-keyspace']
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    name: Build Image & Push To ECR
    runs-on: self-hosted
    outputs:
      dev-image: ${{ steps.login-ecr-dev.outputs.registry }}/${{ env.ECR_REPO }}:${{ github.sha }}
      prod-image: ${{ steps.login-ecr-prod.outputs.registry }}/${{ env.ECR_REPO }}:${{ github.sha }}
    env:
      ECR_REPO: tidbcloud/serverless/pd
      GITHUB_TOKEN: ${{ secrets.GIT_ACTION_BOT }}
      GCR_REPO: gcr.io/pingcap-public/serverless/pd
      GCR_TAG: v6.6.0
      IS_RELEASE_BRANCH: ${{ github.ref == 'refs/heads/release-6.6-keyspace' && github.event_name == 'push' }}
    steps:
      - name: Check out Code
        uses: actions/checkout@v2

      # Setup Go with version from go.mod
      # Note: this will automatically set up go mod and build cache.
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'

      # Setup private repo access in case we need to pull from tidbcloud.
      - name: Configure git for private modules
        if: env.GITHUB_TOKEN != ''
        run: git config --global url."https://${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/";

      - name: Build ARM64 PD Server
        env:
          GOARCH: arm64
          CGO_ENABLED: 0 # Set CGO_ENABLED=0 for cross compiling.
          SWAGGER: 0 # Skip swagger generation.
          DASHBOARD: 0 # Skip building dashboard.
          CD_BIN_PATH: ./tmp # Build to tmp instead of bin to avoid .dockerignore.
        run: make build-cd

      - name: Build AMD64 PD Server
        env:
          GOARCH: amd64
          CGO_ENABLED: 0
          SWAGGER: 0
          DASHBOARD: 0
          CD_BIN_PATH: ./tmp
        run: make build-cd

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: "linux/amd64,linux/arm64"

      - name: Setup Docker Context
        run: |
          docker --context tls-env info || docker context create tls-env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          endpoint: tls-env

      # Setup buildx cache.
      - name: Set up buildx cache
        uses: actions/cache@v3
        with:
          path: |
            /tmp/.buildx-cache
          # Set cache key to be based on Dockerfile.cd, since the actual build is outside buildx.
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile.cd') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install --update

      # Login to ECR Dev
      - name: Login to ECR-dev
        id: login-ecr-dev
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ROLE_ARN: ${{ secrets.DBAAS_DEV_AWS_ROLE }}
          AWS_REGION: us-west-2

      - name: Make Sure the Image Repos Exist - ecr dev
        env:
          AWS_ROLE_ARN: ${{ secrets.DBAAS_DEV_AWS_ROLE }}
          AWS_REGION: us-west-2
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPO }} || aws ecr create-repository --repository-name ${{ env.ECR_REPO }} || exit 1

      # Login to ECR Prod
      - name: Login to ECR-prod
        if: env.IS_RELEASE_BRANCH == 'true'
        id: login-ecr-prod
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ROLE_ARN: ${{ secrets.DBAAS_PROD_AWS_ROLE }}
          AWS_REGION: us-west-2

      - name: Make Sure the Image Repos Exist - ecr prod
        if: env.IS_RELEASE_BRANCH == 'true'
        env:
          AWS_ROLE_ARN: ${{ secrets.DBAAS_PROD_AWS_ROLE }}
          AWS_REGION: us-west-2
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPO }} || aws ecr create-repository --repository-name ${{ env.ECR_REPO }} || exit 1

      # Login to GCR
      - name: Set up Cloud SDK
        if: env.IS_RELEASE_BRANCH == 'true'
        uses: google-github-actions/setup-gcloud@v0

      - name: Configure Gcloud
        if: env.IS_RELEASE_BRANCH == 'true'
        run: |
          gcloud auth configure-docker gcr.io --quiet

      # Setup Tags
      - name: Set tags conditionally
        run: |
          if [ "$IS_RELEASE_BRANCH" = "true" ]; then
            echo "TAGS=${{ steps.login-ecr-dev.outputs.registry }}/${{ env.ECR_REPO }}:${{ github.sha }},"\
            "${{ steps.login-ecr-prod.outputs.registry }}/${{ env.ECR_REPO }}:${{ github.sha }},"\
            "${{ env.GCR_REPO }}:${{ env.GCR_TAG }},"\
            "${{ env.GCR_REPO }}:${{ github.sha }}" >> $GITHUB_ENV
          else
            echo "TAGS=${{ steps.login-ecr-dev.outputs.registry }}/${{ env.ECR_REPO }}:${{ github.sha }}" >> $GITHUB_ENV
          fi

      # Build and Push
      - name: Build and Push Images
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.cd
          platforms: "linux/amd64,linux/arm64"
          push: true
          build-args: |
            GITHUB_TOKEN=${{ secrets.GIT_ACTION_BOT }}
          tags: ${{ env.TAGS }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # Buildx's cache-to currently only work with empty directory, here is a temp workaround.
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
